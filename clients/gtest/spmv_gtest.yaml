---
include: rocblas_common.yaml
include: known_bugs.yaml

Definitions:
  - &special_case_range
    - { N: 0, incx: 1, incy: 1, batch_count: 1 }
    - { N: 1, incx: 1, incy: 1, batch_count: 0 }

    - { N: -1, incx: 1, incy: 1, batch_count:  0 }
    - { N:  0, incx: 0, incy: 1, batch_count:  0 }
    - { N:  0, incx: 1, incy: 0, batch_count:  0 }
    - { N:  0, incx: 1, incy: 1, batch_count: -1 }

  - &medium_matrix_size_range
    - { N:    -1 }
    - { N:     3 }
    - { N:    10 }
    - { N:   500 }

  - &large_matrix_size_range
    - { N:  4011 }
    - { N:  8000 }

  - &incx_incy_range
    - { incx:   1, incy:   1 }
    - { incx:   0, incy:  -1 }
    - { incx:   2, incy:   1 }
    - { incx:  -1, incy:  -1 }

  - &incx_incy_range_small
    - { incx: 2, incy: -2 }

  - &alpha_beta_range
    - { alpha:  1.0, beta:  0.0 }
    - { alpha:  0.0, beta:  1.0 }
    - { alpha: -1.0, beta: -1.0 }
    - { alpha:  2.0, beta:  1.0 }

  - &alpha_beta_range_small
    - { alpha: 2.0, beta: 1.5 }

  - &alpha_beta_range_nan
    - { alpha: .NaN, beta: 1.5 }
    - { alpha: 1.5, beta: .NaN } # alpha value changed from 1.2 -> 1.5 to overcome the equality issue when comparing results of rocBLAS with the host

  - &alpha_beta_range_size_t_inc
    - { alpha:  0,    alphai:  0,   beta:  0.5,   betai:  0 } # only incy used
    - { alpha:  1,    alphai:  0,   beta:  0.5,   betai:  0 }

  - &size_t_index
    - { N: 65536 } # overflow packed index as int (n*(n+1)/2)

  - &size_t_incx_incy
    - { N: 3, lda: 3, incx: *c_pos_x2_overflow_int32, incy: 1 }
    - { N: 3, lda: 3, incx: 1,                        incy: *c_pos_x2_overflow_int32 }

Tests:
- name: spmv_bad
  category: quick
  function: spmv_bad_arg
  precision: *single_precision
  api: [ C, FORTRAN, FORTRAN_64 ]

- name: spmv_arg_check
  category: quick
  function:
  - spmv
  - spmv_batched
  - spmv_strided_batched
  precision: *single_double_precisions
  uplo: L
  matrix_size: *special_case_range

- name: spmv_fortran
  category: quick
  function: spmv
  precision: *single_double_precisions
  uplo: [ U, L ]
  matrix_size: *medium_matrix_size_range
  incx_incy: *incx_incy_range_small
  alpha_beta: *alpha_beta_range_small
  api: FORTRAN

- name: spmv_NaN
  category: pre_checkin
  function: spmv
  precision: *single_double_precisions
  uplo: [ U ]
  N: [ 33 ]
  incx_incy: *incx_incy_range_small
  alpha_beta: *alpha_beta_range_nan

- name: spmv_medium
  category: pre_checkin
  function: spmv
  precision: *single_double_precisions
  uplo: [ U, L ]
  matrix_size: *medium_matrix_size_range
  incx_incy: *incx_incy_range
  alpha_beta: *alpha_beta_range

- name: spmv_large
  category: nightly
  function: spmv
  precision: *single_double_precisions
  uplo: [ U, L ]
  matrix_size: *large_matrix_size_range
  incx_incy: *incx_incy_range_small
  alpha_beta: *alpha_beta_range_small

- name: spmv_size_t
  category: stress
  function: spmv
  precision: *single_precision
  uplo: [ U, L ]
  matrix_size: *size_t_index
  incx: 1
  incy: 1
  alpha_beta: *alpha_beta_range_small
  pointer_mode_host: false
  os_flags: LINUX
  gpu_arch: ['90a']

- name: spmv_size_t_inc
  category: stress
  function: spmv
  precision: *single_precision
  uplo: [ U, L ]
  arguments: *size_t_incx_incy
  alpha_beta: *alpha_beta_range_size_t_inc
  pointer_mode_device: false
  os_flags: LINUX
  gpu_arch: ['90a']

- name: spmv_64
  category: stress
  arguments:
    - { N: 2, incx: 2147483649, incy: 1, batch_count: 1 }
    - { N: 2, incx: 1, incy: -2147483649, batch_count: 1 }
    - { N: 2, stride_a: 4, incx: 1, incy: 1, batch_count: *c_grid_yz_require_passes }
  uplo: [ U, L ]
  stride_scale: [ 1 ]
  alpha_beta: *alpha_beta_range_small
  pointer_mode_host: false
  api: [ C_64 ]
  os_flags: [ LINUX ]
  function:
    - spmv: *single_precision
    - spmv_batched: *single_precision
    - spmv_strided_batched: *single_precision

  # batched
- name: spmv_batched_bad
  category: quick
  function: spmv_batched_bad_arg
  precision: *single_precision
  api: [ C, FORTRAN ]

- name: spmv_batched_fortran
  category: quick
  function: spmv_batched
  precision: *single_double_precisions
  uplo: [ U, L ]
  matrix_size: *medium_matrix_size_range
  incx_incy: *incx_incy_range_small
  alpha_beta: *alpha_beta_range_small
  batch_count: [ -1, 0, 3 ]
  api: FORTRAN

- name: spmv_batched_NaN
  category: pre_checkin
  function: spmv_batched
  precision: *double_precision
  uplo: [ U ]
  N: [ 33 ]
  incx_incy: *incx_incy_range_small
  alpha_beta: *alpha_beta_range_nan
  batch_count: [ 2 ]

- name: spmv_batched_medium
  category: pre_checkin
  function: spmv_batched
  precision: *single_double_precisions
  uplo: [ U, L ]
  matrix_size: *medium_matrix_size_range
  incx_incy: *incx_incy_range
  alpha_beta: *alpha_beta_range
  batch_count: [ -1, 0, 1, 257 ]
  pointer_mode_host: false

- name: spmv_batched_large
  category: nightly
  function: spmv_batched
  precision: *single_double_precisions
  uplo: [ U, L ]
  matrix_size: *large_matrix_size_range
  incx_incy: *incx_incy_range_small
  alpha_beta: *alpha_beta_range_small
  batch_count: [ 1, 3 ]
  pointer_mode_device: false

  # strided batched
- name: spmv_strided_batched_bad
  category: quick
  function: spmv_strided_batched_bad_arg
  precision: *single_precision
  api: [ C, FORTRAN ]

- name: spmv_strided_batched_fortran
  category: quick
  function: spmv_strided_batched
  precision: *single_double_precisions
  uplo: [ U, L ]
  matrix_size: *medium_matrix_size_range
  incx_incy: *incx_incy_range_small
  alpha_beta: *alpha_beta_range_small
  batch_count: [ -1, 0, 3 ]
  api: FORTRAN

- name: spmv_strided_batched_NaN
  category: pre_checkin
  function: spmv_strided_batched
  precision: *single_double_precisions
  uplo: [ L ]
  N: [ 33 ]
  incx_incy: *incx_incy_range_small
  alpha_beta: *alpha_beta_range_nan
  batch_count: [ 2 ]

- name: spmv_strided_batched_medium
  category: pre_checkin
  function: spmv_strided_batched
  precision: *single_double_precisions
  uplo: [ U, L ]
  matrix_size: *medium_matrix_size_range
  incx_incy: *incx_incy_range
  alpha_beta: *alpha_beta_range
  batch_count: [ -1, 0, 1, 257 ]
  pointer_mode_device: false

- name: spmv_strided_batched_large
  category: nightly
  function: spmv_strided_batched
  precision: *single_double_precisions
  uplo: [ U, L ]
  matrix_size: *large_matrix_size_range
  incx_incy: *incx_incy_range_small
  alpha_beta: *alpha_beta_range_small
  batch_count: [ 1, 3 ]
  pointer_mode_host: false

- name: spmv_graph_test
  category: pre_checkin
  function:
        - spmv
        - spmv_batched
        - spmv_strided_batched
  precision: *single_double_precisions
  matrix_size:
        - { N : 33 }
  uplo: [ U ]
  incx: [ 1 ]
  alpha: [ 2.0 ]
  stride_scale: [ 1 ]
  batch_count: [ 5 ]
  graph_test: true

- name: spmv_repeatability_check
  category: stress
  function:
        - spmv
        - spmv_batched
        - spmv_strided_batched
  precision: *single_double_precisions
  matrix_size:
        - { N : 33 }
  uplo: [ U ]
  incx: [ 1 ]
  alpha: [ 2.0 ]
  stride_scale: [ 1 ]
  batch_count: [ 2 ]
  initialization: hpl
  atomics_mode: 0
  pointer_mode_host: false
  iters: 5
  repeatability_check: true
...
