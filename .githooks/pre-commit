#!/bin/bash
#
# This pre-commit hook checks if any versions of clang-format
# are installed, and if so, uses the installed version to format
# the staged changes.

export PATH=/opt/rocm/llvm/bin:/opt/rocm/hcc/bin:/usr/bin:/bin

# Redirect stdout to stderr.
exec >&2

# Do everything from top - level
cd $(git rev-parse --show-toplevel)

if git rev-parse --verify HEAD >/dev/null 2>&1; then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

if [[ "$1" == "--reformat" ]]; then
    files=$(git ls-files --exclude-standard)
else
    files=$(git diff-index --cached --name-only $against)
fi

[[ -z "$files" ]] && exit

# Change the copyright date at the top of any text files
for file in $files; do
    [[ -L $file ]] && continue
    echo "Processing copyright dates in $file"
    if [[ -e $file ]]; then
        /usr/bin/perl -pi -e 'INIT { exit 1 if !-f $ARGV[0] || -B $ARGV[0]; $year = (localtime)[5] + 1900 }
            s/^([*\/#[:space:]]*)Copyright\s+(?:\(C\)\s*)?(\d+)(?:\s*-\s*\d+)?/qq($1Copyright $2@{[$year != $2 ? "-$year" : ""]})/ie
            if $. < 10' "$file" && git add -u "$file"
    fi
done

# do the formatting
for file in $files; do
    [[ -L $file ]] && continue
    if [[ -e $file ]] && echo $file | grep -Eq '\.c$|\.h$|\.hpp$|\.cpp$|\.cl$|\.in$|\.txt$|\.yaml$|\.yml$|\.sh$|\.py$|\.pl$|\.cmake$|\.md$|\.rst$|\.groovy$|\.ini$|\.awk$|\.csv$'; then
        echo "Processing line endings in $file"
        sed -i -e 's/[[:space:]]*$//' "$file" # Remove whitespace at end of lines
        sed -i -e '$a\' "$file" # Add missing newline to end of file

        echo "Converting non-ASCII characters to ASCII equivalents in $file"
        # Convert UTF8 non-ASCII to ASCII
        temp=$(mktemp)
        [[ -w $temp ]] || exit
        iconv -s -f utf-8 -t ascii//TRANSLIT "$file" > "$temp" || exit
        chmod --reference="$file" "$temp" || exit
        mv -f "$temp" "$file" || exit
        git add -u "$file"
    fi
done

# if clang-format exists, run it on C/C++ files
if command -v clang-format >/dev/null; then
    for file in $files; do
    [[ -L $file ]] && continue
       if [[ -e $file ]] && echo $file | grep -Eq '\.c$|\.h$|\.hpp$|\.cpp$|\.cl$|\.h\.in$|\.hpp\.in$|\.cpp\.in$'; then
            echo "clang-format $file"
            clang-format -i -style=file "$file"
            git add -u "$file"
        fi
    done
else 
    echo "clang-format command not found, skipping file formatting."
    # exit 127 
fi

# Perform cppcheck for added or modified files
# if cppcheck exists, run it on C/C++ files
if command -v cppcheck >/dev/null; then
    for file in $files; do
        [[ -L $file ]] && continue
        if [[ -e $file ]] && echo $file | grep -Eq '\.c$|\.h$|\.hpp$|\.cpp$|\.cl$|\.h\.in$|\.hpp\.in$|\.cpp\.in$'; then
            echo "cppcheck for $file"
            cppcheck --enable=all --inconclusive --library=googletest --inline-suppr \
                    -i./build --suppressions-list=./CppCheckSuppressions.txt \
                    --template="{file}:{line}: {severity}: {id} :{message}" \
                    --error-exitcode=1 "$file"
            exit $?
        fi
    done
else
    echo "cppcheck command not found, skipping static analysis."
    # exit 127
fi